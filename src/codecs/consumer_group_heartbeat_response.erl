-module(consumer_group_heartbeat_response).
-export([
    encode_consumer_group_heartbeat_response_0/1,
    decode_consumer_group_heartbeat_response_0/1
]).
-export_type([
    consumer_group_heartbeat_response_0/0,
    assignment_0/0,
    topic_partitions_0/0
]).
-include("../encoders.hrl").
-include("../decoders.hrl").
-include("../guards.hrl").
-include("../error.hrl").

-define(EMPTY_TAG_BUFFER, [<<0:8/big>>]).

-spec encode_consumer_group_heartbeat_response_0(consumer_group_heartbeat_response_0()) -> iodata().

encode_consumer_group_heartbeat_response_0(
    _Args = #{
        % The correlation ID of this request.
        correlation_id := CorrelationId,
        % The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
        throttle_time_ms := ThrottleTimeMs,
        % The top-level error code, or 0 if there was no error
        error_code := ErrorCode,
        % The top-level error message, or null if there was no error.
        error_message := ErrorMessage,
        % The member id generated by the coordinator. Only provided when the member joins with MemberEpoch == 0.
        member_id := MemberId,
        % The member epoch.
        member_epoch := MemberEpoch,
        % True if the member should compute the assignment for the group.
        should_compute_assignment := ShouldComputeAssignment,
        % The heartbeat interval in milliseconds.
        heartbeat_interval_ms := HeartbeatIntervalMs,
        % null if not provided; the assignment otherwise.
        assignment := Assignment
    }
) when
    ?is_int32(CorrelationId),
    ?is_int32(ThrottleTimeMs),
    ?is_int16(ErrorCode),
    ?is_nullable_string(ErrorMessage),
    ?is_nullable_string(MemberId),
    ?is_int32(MemberEpoch),
    ?is_bool(ShouldComputeAssignment),
    ?is_int32(HeartbeatIntervalMs),
    ?is_nullable_entity(Assignment)
->
    [
        ?encode_response_header_1(CorrelationId),
        ?encode_int32(ThrottleTimeMs),
        ?encode_int16(ErrorCode),
        ?encode_compact_nullable_string(ErrorMessage),
        ?encode_compact_nullable_string(MemberId),
        ?encode_int32(MemberEpoch),
        ?encode_bool(ShouldComputeAssignment),
        ?encode_int32(HeartbeatIntervalMs),
        encode_assignment_0(Assignment),
        ?EMPTY_TAG_BUFFER
    ];
encode_consumer_group_heartbeat_response_0(Args) ->
    ?encoder_error(Args, #{
        correlation_id => int32,
        throttle_time_ms => int32,
        error_code => int16,
        error_message => nullable_string,
        member_id => nullable_string,
        member_epoch => int32,
        should_compute_assignment => bool,
        heartbeat_interval_ms => int32,
        assignment => nullable_Assignment
    }).

-spec decode_consumer_group_heartbeat_response_0(binary()) -> {Decoded, Rest} when
    Decoded :: consumer_group_heartbeat_response_0(),
    Rest :: binary().

decode_consumer_group_heartbeat_response_0(Bin) when is_binary(Bin) ->
    {Header, Bin0} = ?decode_response_header_1(Bin),
    ?_decode_int32(ThrottleTimeMs, Bin0, Bin1),
    ?_decode_int16(ErrorCode, Bin1, Bin2),
    ?_decode_compact_nullable_string(ErrorMessage, Bin2, Bin3),
    ?_decode_compact_nullable_string(MemberId, Bin3, Bin4),
    ?_decode_int32(MemberEpoch, Bin4, Bin5),
    ?_decode_bool(ShouldComputeAssignment, Bin5, Bin6),
    ?_decode_int32(HeartbeatIntervalMs, Bin6, Bin7),
    ?_decode_entity(Assignment, Bin7, Bin8, decode_assignment_0),
    ?decode_tagged_fields(
        fun decode_consumer_group_heartbeat_response_0_tagged_field/3,
        Header#{
            throttle_time_ms => ThrottleTimeMs,
            error_code => ErrorCode,
            error_message => ErrorMessage,
            member_id => MemberId,
            member_epoch => MemberEpoch,
            should_compute_assignment => ShouldComputeAssignment,
            heartbeat_interval_ms => HeartbeatIntervalMs,
            assignment => Assignment
        },
        Bin8
    ).

-spec decode_consumer_group_heartbeat_response_0_tagged_field(Tag, Input, AccIn) -> AccOut when
    Tag :: non_neg_integer(),
    Input :: binary(),
    AccIn :: Acc,
    AccOut :: Acc.

decode_consumer_group_heartbeat_response_0_tagged_field(_Tag, _Bin0, Acc) ->
    % Unrecognised tag; ignore it.
    Acc.

-spec encode_assignment_0(assignment_0()) -> iodata().

encode_assignment_0(
    _Args = #{
        % The assigned error.
        error := Error,
        % The partitions assigned to the member that can be used immediately.
        assigned_topic_partitions := AssignedTopicPartitions,
        % The partitions assigned to the member that cannot be used because they are not released by their former owners yet.
        pending_topic_partitions := PendingTopicPartitions,
        % The version of the metadata.
        metadata_version := MetadataVersion,
        % The assigned metadata.
        metadata_bytes := MetadataBytes
    }
) when
    ?is_int8(Error),
    ?is_array(AssignedTopicPartitions),
    ?is_array(PendingTopicPartitions),
    ?is_int16(MetadataVersion),
    ?is_bytes(MetadataBytes)
->
    [
        ?encode_int8(Error),
        ?encode_compact_array(AssignedTopicPartitions, fun encode_topic_partitions_0/1),
        ?encode_compact_array(PendingTopicPartitions, fun encode_topic_partitions_0/1),
        ?encode_int16(MetadataVersion),
        ?encode_compact_bytes(MetadataBytes),
        ?EMPTY_TAG_BUFFER
    ];
encode_assignment_0(Args) ->
    ?encoder_error(Args, #{
        error => int8,
        assigned_topic_partitions => {array, topic_partitions_0},
        pending_topic_partitions => {array, topic_partitions_0},
        metadata_version => int16,
        metadata_bytes => bytes
    }).

-spec decode_assignment_0(binary()) -> {Decoded, Rest} when
    Decoded :: assignment_0(),
    Rest :: binary().

decode_assignment_0(Bin0) when is_binary(Bin0) ->
    ?_decode_int8(Error, Bin0, Bin1),
    ?_decode_compact_array(AssignedTopicPartitions, Bin1, Bin2, ?_decode_element(decode_topic_partitions_0)),
    ?_decode_compact_array(PendingTopicPartitions, Bin2, Bin3, ?_decode_element(decode_topic_partitions_0)),
    ?_decode_int16(MetadataVersion, Bin3, Bin4),
    ?_decode_compact_bytes(MetadataBytes, Bin4, Bin5),
    ?decode_tagged_fields(
        fun decode_assignment_0_tagged_field/3,
        #{
            error => Error,
            assigned_topic_partitions => AssignedTopicPartitions,
            pending_topic_partitions => PendingTopicPartitions,
            metadata_version => MetadataVersion,
            metadata_bytes => MetadataBytes
        },
        Bin5
    ).

-spec decode_assignment_0_tagged_field(Tag, Input, AccIn) -> AccOut when
    Tag :: non_neg_integer(),
    Input :: binary(),
    AccIn :: Acc,
    AccOut :: Acc.

decode_assignment_0_tagged_field(_Tag, _Bin0, Acc) ->
    % Unrecognised tag; ignore it.
    Acc.

-spec encode_topic_partitions_0(topic_partitions_0()) -> iodata().

encode_topic_partitions_0(
    _Args = #{
        % The topic ID.
        topic_id := TopicId,
        % The partitions.
        partitions := Partitions
    }
) when
    ?is_uuid(TopicId),
    ?is_array(Partitions)
->
    [
        ?encode_uuid(TopicId),
        ?encode_compact_array(Partitions, ?encode_int32_),
        ?EMPTY_TAG_BUFFER
    ];
encode_topic_partitions_0(Args) ->
    ?encoder_error(Args, #{
        topic_id => uuid,
        partitions => {array, int32}
    }).

-spec decode_topic_partitions_0(binary()) -> {Decoded, Rest} when
    Decoded :: topic_partitions_0(),
    Rest :: binary().

decode_topic_partitions_0(Bin0) when is_binary(Bin0) ->
    ?_decode_uuid(TopicId, Bin0, Bin1),
    ?_decode_compact_array(Partitions, Bin1, Bin2, ?decode_int32_),
    ?decode_tagged_fields(
        fun decode_topic_partitions_0_tagged_field/3,
        #{
            topic_id => TopicId,
            partitions => Partitions
        },
        Bin2
    ).

-spec decode_topic_partitions_0_tagged_field(Tag, Input, AccIn) -> AccOut when
    Tag :: non_neg_integer(),
    Input :: binary(),
    AccIn :: Acc,
    AccOut :: Acc.

decode_topic_partitions_0_tagged_field(_Tag, _Bin0, Acc) ->
    % Unrecognised tag; ignore it.
    Acc.

-type consumer_group_heartbeat_response_0() :: #{
    correlation_id => integer(),
    throttle_time_ms := integer(),
    error_code := integer(),
    error_message := binary() | null,
    member_id := binary() | null,
    member_epoch := integer(),
    should_compute_assignment := boolean(),
    heartbeat_interval_ms := integer(),
    assignment := assignment_0() | null
}.
-type assignment_0() :: #{
    error := integer(),
    assigned_topic_partitions := list(topic_partitions_0()),
    pending_topic_partitions := list(topic_partitions_0()),
    metadata_version := integer(),
    metadata_bytes := kafcod:bytes()
}.
-type topic_partitions_0() :: #{
    topic_id := kafcod:uuid(),
    partitions := list(integer())
}.
