-module(alter_user_scram_credentials_request).
-export([
    encode_alter_user_scram_credentials_request_0/1,
    decode_alter_user_scram_credentials_request_0/1
]).
-export_type([
    alter_user_scram_credentials_request_0/0,
    scram_credential_deletion_0/0,
    scram_credential_upsertion_0/0
]).
-include("../encoders.hrl").
-include("../decoders.hrl").
-include("../guards.hrl").
-include("../error.hrl").

-define(ALTER_USER_SCRAM_CREDENTIALS_REQUEST, 51).
-define(EMPTY_TAG_BUFFER, [<<0:8/big>>]).

-spec encode_alter_user_scram_credentials_request_0(alter_user_scram_credentials_request_0()) -> iodata().

encode_alter_user_scram_credentials_request_0(
    _Args = #{
        % The correlation ID of this request.
        correlation_id := CorrelationId,
        % The client ID string.
        client_id := ClientId,
        % The SCRAM credentials to remove.
        deletions := Deletions,
        % The SCRAM credentials to update/insert.
        upsertions := Upsertions
    }
) when
    ?is_int32(CorrelationId),
    ?is_nullable_string(ClientId),
    ?is_array(Deletions),
    ?is_array(Upsertions)
->
    [
        ?encode_request_header_2(?ALTER_USER_SCRAM_CREDENTIALS_REQUEST, 0, CorrelationId, ClientId),
        ?encode_compact_array(Deletions, fun encode_scram_credential_deletion_0/1),
        ?encode_compact_array(Upsertions, fun encode_scram_credential_upsertion_0/1),
        ?EMPTY_TAG_BUFFER
    ];
encode_alter_user_scram_credentials_request_0(Args) ->
    ?encoder_error(Args, #{
        correlation_id => int32,
        client_id => nullable_string,
        deletions => {array, scram_credential_deletion_0},
        upsertions => {array, scram_credential_upsertion_0}
    }).

-spec decode_alter_user_scram_credentials_request_0(binary()) -> {Decoded, Rest} when
    Decoded :: alter_user_scram_credentials_request_0(),
    Rest :: binary().

decode_alter_user_scram_credentials_request_0(Bin) when is_binary(Bin) ->
    {Header, Bin0} = ?decode_request_header_2(Bin),
    ?_decode_compact_array(Deletions, Bin0, Bin1, ?_decode_element(decode_scram_credential_deletion_0)),
    ?_decode_compact_array(Upsertions, Bin1, Bin2, ?_decode_element(decode_scram_credential_upsertion_0)),
    ?decode_tagged_fields(
        fun decode_alter_user_scram_credentials_request_0_tagged_field/3,
        Header#{
            deletions => Deletions,
            upsertions => Upsertions
        },
        Bin2
    ).

-spec decode_alter_user_scram_credentials_request_0_tagged_field(Tag, Input, AccIn) -> AccOut when
    Tag :: non_neg_integer(),
    Input :: binary(),
    AccIn :: Acc,
    AccOut :: Acc.

decode_alter_user_scram_credentials_request_0_tagged_field(_Tag, _Bin0, Acc) ->
    % Unrecognised tag; ignore it.
    Acc.

-spec encode_scram_credential_deletion_0(scram_credential_deletion_0()) -> iodata().

encode_scram_credential_deletion_0(
    _Args = #{
        % The user name.
        name := Name,
        % The SCRAM mechanism.
        mechanism := Mechanism
    }
) when
    ?is_string(Name),
    ?is_int8(Mechanism)
->
    [
        ?encode_compact_string(Name),
        ?encode_int8(Mechanism),
        ?EMPTY_TAG_BUFFER
    ];
encode_scram_credential_deletion_0(Args) ->
    ?encoder_error(Args, #{
        name => string,
        mechanism => int8
    }).

-spec decode_scram_credential_deletion_0(binary()) -> {Decoded, Rest} when
    Decoded :: scram_credential_deletion_0(),
    Rest :: binary().

decode_scram_credential_deletion_0(Bin0) when is_binary(Bin0) ->
    ?_decode_compact_string(Name, Bin0, Bin1),
    ?_decode_int8(Mechanism, Bin1, Bin2),
    ?decode_tagged_fields(
        fun decode_scram_credential_deletion_0_tagged_field/3,
        #{
            name => Name,
            mechanism => Mechanism
        },
        Bin2
    ).

-spec decode_scram_credential_deletion_0_tagged_field(Tag, Input, AccIn) -> AccOut when
    Tag :: non_neg_integer(),
    Input :: binary(),
    AccIn :: Acc,
    AccOut :: Acc.

decode_scram_credential_deletion_0_tagged_field(_Tag, _Bin0, Acc) ->
    % Unrecognised tag; ignore it.
    Acc.

-spec encode_scram_credential_upsertion_0(scram_credential_upsertion_0()) -> iodata().

encode_scram_credential_upsertion_0(
    _Args = #{
        % The user name.
        name := Name,
        % The SCRAM mechanism.
        mechanism := Mechanism,
        % The number of iterations.
        iterations := Iterations,
        % A random salt generated by the client.
        salt := Salt,
        % The salted password.
        salted_password := SaltedPassword
    }
) when
    ?is_string(Name),
    ?is_int8(Mechanism),
    ?is_int32(Iterations),
    ?is_bytes(Salt),
    ?is_bytes(SaltedPassword)
->
    [
        ?encode_compact_string(Name),
        ?encode_int8(Mechanism),
        ?encode_int32(Iterations),
        ?encode_compact_bytes(Salt),
        ?encode_compact_bytes(SaltedPassword),
        ?EMPTY_TAG_BUFFER
    ];
encode_scram_credential_upsertion_0(Args) ->
    ?encoder_error(Args, #{
        name => string,
        mechanism => int8,
        iterations => int32,
        salt => bytes,
        salted_password => bytes
    }).

-spec decode_scram_credential_upsertion_0(binary()) -> {Decoded, Rest} when
    Decoded :: scram_credential_upsertion_0(),
    Rest :: binary().

decode_scram_credential_upsertion_0(Bin0) when is_binary(Bin0) ->
    ?_decode_compact_string(Name, Bin0, Bin1),
    ?_decode_int8(Mechanism, Bin1, Bin2),
    ?_decode_int32(Iterations, Bin2, Bin3),
    ?_decode_compact_bytes(Salt, Bin3, Bin4),
    ?_decode_compact_bytes(SaltedPassword, Bin4, Bin5),
    ?decode_tagged_fields(
        fun decode_scram_credential_upsertion_0_tagged_field/3,
        #{
            name => Name,
            mechanism => Mechanism,
            iterations => Iterations,
            salt => Salt,
            salted_password => SaltedPassword
        },
        Bin5
    ).

-spec decode_scram_credential_upsertion_0_tagged_field(Tag, Input, AccIn) -> AccOut when
    Tag :: non_neg_integer(),
    Input :: binary(),
    AccIn :: Acc,
    AccOut :: Acc.

decode_scram_credential_upsertion_0_tagged_field(_Tag, _Bin0, Acc) ->
    % Unrecognised tag; ignore it.
    Acc.

-type alter_user_scram_credentials_request_0() :: #{
    api_key => integer(),
    api_version => integer(),
    correlation_id => integer(),
    client_id => binary() | null,
    deletions := list(scram_credential_deletion_0()),
    upsertions := list(scram_credential_upsertion_0())
}.
-type scram_credential_deletion_0() :: #{
    name := binary(),
    mechanism := integer()
}.
-type scram_credential_upsertion_0() :: #{
    name := binary(),
    mechanism := integer(),
    iterations := integer(),
    salt := kafcod:bytes(),
    salted_password := kafcod:bytes()
}.
